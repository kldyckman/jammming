{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/SpotifyCredentials.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracksIn","tracksInPlaylist","find","savedTrack","id","tracks","map","isInPlaylist","SearchResults","searchResults","playlistTracks","Playlist","handleNameChange","onNameChange","defaultValue","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b41e3d7f.chunk.js","sourcesContent":["import { clientId } from './SpotifyCredentials.js';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            // this clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlayList(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button  onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport Track from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nclass TrackList extends React.Component {\r\n\r\n    isInPlaylist(track) {\r\n        let tracksIn = this.props.tracksInPlaylist;\r\n        // check if tracksIn is not \"undefined\"\r\n        if (!tracksIn) {\r\n            return; // if it is, break the code below\r\n        }\r\n         // check if the track passed in argument  is in the playlist or not and return a boolean \r\n        return (tracksIn.find(savedTrack => (savedTrack.id === track.id))) ? true : false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        if (!this.isInPlaylist(track)) { // display each track only if it is not in the playlist\r\n                            return <Track key={track.id}\r\n                                track={track}\r\n                                onAdd={this.props.onAdd}\r\n                                onRemove={this.props.onRemove}\r\n                                isRemoval={this.props.isRemoval}\r\n                            />\r\n                        } else { // if it is in the playlist, display nothing\r\n                            return null;\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} tracksInPlaylist={this.props.playlistTracks} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","export const clientId = '2976a592fb5a4ad7accadbdd87401a76';","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\n\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: []\r\n\r\n    }\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    if (tracks.find(savedTrack => savedTrack.id === tracks.id)) {\r\n      return;\r\n    }\r\n\r\n    tracks.push(track);\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({ playlistName: name });\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      })\r\n    })\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({ searchResults: searchResults })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} playlistTracks={this.state.playlistTracks} />\r\n            <Playlist playlistName={this.state.playlistName} \r\n                      playlistTracks={this.state.playlistTracks} \r\n                      onRemove={this.removeTrack} \r\n                      onNameChange={this.updatePlaylistName}\r\n                      onSave={this.savePlaylist} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}